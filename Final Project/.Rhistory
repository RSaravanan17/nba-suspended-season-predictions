install.packages("elo")
install.packages("EloRating")
# DATA
games <- read.csv('C:\Users\Ryan\Documents\GitHub\SDSFinalProject\Final Project\Basketball-Reference-19-20\Games')
# DATA
games <- read.csv("C:\Users\Ryan\Documents\GitHub\SDSFinalProject\Final Project\Basketball-Reference-19-20\Games")
# DATA
games <- read.csv("Users\Ryan\Documents\GitHub\SDSFinalProject\Final Project\Basketball-Reference-19-20\Games")
# DATA
games <- read.csv("/Users/Ryan/Documents/GitHub/SDSFinalProject/Final Project/Basketball-Reference-19-20/Games")
# DATA
setwd("/Users/Ryan/Documents/GitHub/SDSFinalProject/Final Project")
getwd()
games <- read.csv("../Basketball-Reference-19-20/Games")
games <- read.csv("wd+Basketball-Reference-19-20/Games")
games <- read.csv("Basketball-Reference-19-20/Games")
Season.19.20 <- read.csv("~/GitHub/SDSFinalProject/Final Project/Basketball-Reference-19-20/Games/Season-19-20.csv")
View(Season.19.20)
head(Season.19.20)
games <- Season.19.20
head(games)
# ATTEMPT USING FIFA TO DO BASKETBALL
library(dplyr)
matches <- readr::read_csv('\Basketball-Reference-19-20\Games\Season-19-20')
matches <- readr::read_csv('/Basketball-Reference-19-20/Games/Season-19-20')
matches <- readr::read_csv("C:\Users\Ryan\Desktop\SDSFinalProject\Final Project\Basketball-Reference-19-20\Games\Season-19-20.csv")
matches <- readr::read_csv("\Users\Ryan\Desktop\SDSFinalProject\Final Project\Basketball-Reference-19-20\Games\Season-19-20.csv")
matches <- readr::read_csv("Users\Ryan\Desktop\SDSFinalProject\Final Project\Basketball-Reference-19-20\Games\Season-19-20.csv")
matches <- readr::read_csv("Users/Ryan/Desktop/SDSFinalProject/Final Project/Basketball-Reference-19-20/Games/Season-19-20.csv")
setwd("Users/Ryan/Desktop/SDSFinalProject/Final Project/Basketball-Reference-19-20/Games/")
Season.19.20 <- read.csv("C:/Users/Ryan/Desktop/SDSFinalProject/Final Project/Basketball-Reference-19-20/Games/Season-19-20.csv")
View(Season.19.20)
matches <- Season.19.20
head(matches)
teams <- data.frame(team = unique(c(matches$Home.Neutral, matches$Vistor.Neutral)))
head(teams)
teams
str(matches)
teams <- data.frame(team = unique(c(levels(matches$Home.Neutral), levels(matches$Vistor.Neutral)))
teams <- data.frame(team = unique(c(levels(matches$Home.Neutral), levels(matches$Vistor.Neutral))))
teams <- data.frame(team = unique(c(levels(matches$Home.Neutral), levels(matches$Vistor.Neutral)))
levels(matches&Home.Neutral)
levels(matches$Home.Neutral)
levels(matches$Visitor.Neutral)
teams <- data.frame(team = unique(c(levels(matches$Home.Neutral)))
teams <- data.frame(team = unique(c(levels(matches$Home.Neutral), levels(matches$Vistor.Neutral))))
teams <- data.frame(team = unique(c(levels(matches$Home.Neutral))))
teams
teams <- teams %>%
mutate(elo = 1500)
head(teams)
matches <- matches %>%
mutate(result = if_else(PTS.1 > PTS, 1,
if_else(PTS.1 < PTS, 0)))
matches <- matches %>%
mutate(result = if_else(PTS.1 > PTS, 1, 0))
head(matches)
matches <- matches %>%
select(Date, Home.Neutral, Visitor.Neutral, result) %>%
arrange(Date)
head(matches)
matches
matches <- Season.19.20
teams <- data.frame(team = unique(c(levels(matches$Home.Neutral)))) # All 30 teams
levels(matches$Home.Neutral)
levels(matches$Visitor.Neutral)
teams <- teams %>%
mutate(elo = 1500)
matches <- matches %>%
mutate(result = if_else(PTS.1 > PTS, 1, 0))
matches <- matches %>%
select(Date, Home.Neutral, Visitor.Neutral, result)
head(matches)
matches
tail(matches, 50)
library(elo)
match <- matches[i, ]
head(teams)
head(matches)
# Pre-match ratings
teamA_elo <- subset(teams, team == match$Home.Neutral)$elo
# Pre-match ratings
teamA_elo <- subset(teams, team == levels(match$Home.Neutral))$elo
str(teams)
home_team <- levels(matches$Home.Neutral)
away_team <- levels(matches$Visitor.Neutral)
# Pre-match ratings
teamA_elo <- subset(teams, team == home_team)$elo
teamB_elo <- subset(teams, team == away_team)$elo
for (i in seq_len(nrow(matches))) {
match <- matches[i, ]
# Pre-match ratings
teamA_elo <- subset(teams, team == home_team)$elo
teamB_elo <- subset(teams, team == away_team)$elo
# Let's update our ratings
new_elo <- elo.calc(wins.A = match$result,
elo.A = teamA_elo,
elo.B = teamB_elo,
k = 20)
# The results come back as a data.frame
# with team A's new rating in row 1 / column 1
# and team B's new rating in row 1 / column 2
teamA_new_elo <- new_elo[1, 1]
teamB_new_elo <- new_elo[1, 2]
# We then update the ratings for teams A and B
# and leave the other teams as they were
teams <- teams %>%
mutate(elo = if_else(team == home_team, teamA_new_elo,
if_else(team == away_team, teamB_new_elo, elo)))
}
teams %>%
arrange(-elo) %>%
head
team
teams
# Pre-match ratings
teamA_elo <- subset(teams, team == home_team)$elo
teamB_elo <- subset(teams, team == away_team)$elo
matches <- Season.19.20
teams <- data.frame(team = unique(c(levels(matches$Home.Neutral)))) # All 30 teams
home_team <- levels(matches$Home.Neutral)
away_team <- levels(matches$Visitor.Neutral)
teams <- teams %>%
mutate(elo = 1500)
matches <- matches %>%
mutate(result = if_else(PTS.1 > PTS, 1, 0))
# add points?
matches <- matches %>%
select(Date, Home.Neutral, Visitor.Neutral, result)
library(elo)
as.characters(match$Home.Neutral)
as.character(match$Home.Neutral)
str(matches)
matches <- lapply(matches$Home.Neutral, as.character)
matches <- lapply(matches$Visitor.Neutral, as.character)
str(matches)
matches <- data.fram(Season.19.20, stringsAsFactors=FALSE)
matches <- data.frame(Season.19.20, stringsAsFactors=FALSE)
matches
str(matches)
matches %>% mutate_if(is.factor, as.character)
str(matches)
as.character(matches$Home.Neutral)
str(matches)
matches$Home.Neutral <- as.character(matches$Home.Neutral)
str(matches)
matches <- Season.19.20
matches$Home.Neutral <- as.character(matches$Home.Neutral)
matches$Visitor.Neutral <- as.character(matches$Visitor.Neutral)
str(matches)
teams <- data.frame(team = unique(c(levels(matches$Home.Neutral)))) # All 30 teams
teams <- teams %>%
mutate(elo = 1500)
matches <- matches %>%
mutate(result = if_else(PTS.1 > PTS, 1, 0))
# add points?
matches <- matches %>%
select(Date, Home.Neutral, Visitor.Neutral, result)
library(elo)
str(teams)
teams <- data.frame(team = unique(c(levels(matches$Home.Neutral)))) # All 30 teams
teams
# use levels() if factor
teams <- data.frame(team = unique(c(matches$Home.Neutral))) # All 30 teams
teams
str(teams)
str(matches)
matches <- Season.19.20
matches$Home.Neutral <- as.character(matches$Home.Neutral)
matches$Visitor.Neutral <- as.character(matches$Visitor.Neutral)
# use levels() if factor
teams <- data.frame(team = unique(c(matches$Home.Neutral))) # All 30 teams
str(teams)
teams$team <- as.character(teams$team)
str(teams)
matches <- Season.19.20
matches$Home.Neutral <- as.character(matches$Home.Neutral)
matches$Visitor.Neutral <- as.character(matches$Visitor.Neutral)
# use levels() if factor
teams <- data.frame(team = unique(c(matches$Home.Neutral))) # All 30 teams
teams$team <- as.character(teams$team)
teams <- teams %>%
mutate(elo = 1500)
matches <- matches %>%
mutate(result = if_else(PTS.1 > PTS, 1, 0))
# add points?
matches <- matches %>%
select(Date, Home.Neutral, Visitor.Neutral, result)
library(elo)
for (i in seq_len(nrow(matches))) {
match <- matches[i, ]
# Pre-match ratings
teamA_elo <- subset(teams, team == match$Home.Neutral)$elo
teamB_elo <- subset(teams, team == match$Visitor.Neutral)$elo
# Let's update our ratings
new_elo <- elo.calc(wins.A = match$result,
elo.A = teamA_elo,
elo.B = teamB_elo,
k = 30)
# The results come back as a data.frame
# with team A's new rating in row 1 / column 1
# and team B's new rating in row 1 / column 2
teamA_new_elo <- new_elo[1, 1]
teamB_new_elo <- new_elo[1, 2]
# We then update the ratings for teams A and B
# and leave the other teams as they were
teams <- teams %>%
mutate(elo = if_else(team == match$Home.Neutral, teamA_new_elo,
if_else(team == match$Visitor.Neutral, teamB_new_elo, elo)))
}
teams %>%
arrange(-elo) %>%
head
teams %>%
arrange(-elo) %>%
head(10)
# Probabilities for individual matches
# Lakers vs Bucks?
lakers <- subset(teams, team == "Los Angeles Lakers")$elo
bucks <- subset(teams, team == "Milwaukee Bucks")$elo
lakers
bucks
elo.prob(lakers, bucks)
# To calculate the probability team.A beats team.B, use elo.prob()
elo.A <- c(1500, 1500)
elo.B <- c(1500, 1600)
elo.prob(elo.A, elo.B)
# To calculate the score update after the two teams play, use elo.update()
wins.A <- c(1, 0)
elo.update(wins.A, elo.A, elo.B, k = 20)
# To calculate the new Elo scores after the update, use elo.calc()
elo.calc(wins.A, elo.A, elo.B, k = 20)
# ELO.RUN()
# To calculate a series of Elo updates, use elo.run(). This function has a formula = and data = interface. We first load the dataset tournament.
matches <- Season.19.20
matches$Home.Neutral <- as.character(matches$Home.Neutral)
matches$Visitor.Neutral <- as.character(matches$Visitor.Neutral)
str(matches)
# ELO.RUN()
# To calculate a series of Elo updates, use elo.run(). This function has a formula = and data = interface. We first load the dataset tournament.
matches <- Season.19.20
matches$Home.Neutral <- as.character(matches$Home.Neutral)
matches$Visitor.Neutral <- as.character(matches$Visitor.Neutral)
# formula = should be in the format of wins.A ~ team.A + team.B. The score() function will help to calculate winners on the fly (1 = win, 0.5 = tie, 0 = loss).
matches$wins.A <- matches$PTS.1 > matches$PTS
elo.run(wins.A ~ Home.Neutral + Visitor.Neutral, data = matches, k = 20)
elo.run(score(PTS.1, PTS) ~ Home.Neutral + Visitor.Neutral, data = matches, k = 20)
# For more complicated Elo updates, you can include the special function k() in the formula = argument. Here we’re taking the log of the win margin as part of our update.
elo.run(score(PTS.1, PTS) ~ Home.Neutral + Visitor.Neutral +
k(20*log(abs(PTS.1 - PTS) + 1)), data = matches)
# It’s also possible to adjust one team’s Elo for a variety of factors (e.g., home-field advantage).
# The adjust() special function will take as its second argument a vector or a constant.
elo.run(score(PTS.1, PTS) ~ adjust(Home.Neutral, 10) + Visitor.Neutral,
data = matches, k = 20)
# The special function group() doesn’t affect elo.run(), but determines matches to group together in as.matrix() (below).
# There are several helper functions that are useful to use when interacting with objects of class "elo.run".
# summary.elo.run() reports some summary statistics.
e <- elo.run(score(PTS.1, PTS) ~ Home.Neutral + Visitor.Neutral,
data = matches, k = 20)
summary(e)
Season.19.20 <- read.csv("C:/Users/Ryan/Desktop/SDSFinalProject/Final Project/Basketball-Reference-19-20/Games/Season-19-20.csv")
View(Season.19.20)
# The special function group() doesn’t affect elo.run(), but determines matches to group together in as.matrix() (below).
# There are several helper functions that are useful to use when interacting with objects of class "elo.run".
# summary.elo.run() reports some summary statistics.
e <- elo.run(score(PTS.1, PTS) ~ Home.Neutral + Visitor.Neutral,
data = matches, k = 20)
library(elo)
# The special function group() doesn’t affect elo.run(), but determines matches to group together in as.matrix() (below).
# There are several helper functions that are useful to use when interacting with objects of class "elo.run".
# summary.elo.run() reports some summary statistics.
e <- elo.run(score(PTS.1, PTS) ~ Home.Neutral + Visitor.Neutral,
data = matches, k = 20)
matches <- Season.19.20
# The special function group() doesn’t affect elo.run(), but determines matches to group together in as.matrix() (below).
# There are several helper functions that are useful to use when interacting with objects of class "elo.run".
# summary.elo.run() reports some summary statistics.
e <- elo.run(score(PTS.1, PTS) ~ Home.Neutral + Visitor.Neutral,
data = matches, k = 20)
summary(e)
# NO TIES?
rank.teams(e)
# as.matrix.elo.run() creates a matrix of running Elos.
head(as.matrix(e))
# as.data.frame.elo.run() gives the long version (perfect, for, e.g., ggplot2).
str(as.data.frame(e))
# Finally, final.elos() will extract the final Elos per team.
final.elos(e)
# It is also possible to use the Elos calculated by elo.run() to make predictions on future match-ups.
results <- elo.run(score(PTS.1, PTS) ~ adjust(Home.Neutral, 10) + Visitor.Neutral,
data = matches, k = 20)
newdat <- data.frame(
Home.Neutral = "Los Angeles Lakers",
Visitor.Neutral = "Milwaukee Bucks"
)
predict(results, newdata = newdat)
e.winpct <- elo.winpct(score(PTS.1, PTS) ~ Home.Neutral + Visitor.Neutral + group(Date), data = matches,
subset = PTS.1 != PTS) # to get rid of ties for now
summary(e.winpct)
rank.teams(e.winpct)
predict(e.winpct, newdata = data.frame(Home.Neutral = "Los Angeles Lakers", Visitor.Neutral = "Milwaukee Bucks", stringsAsFactors = FALSE))
results <- elo.glm(score(PTS.1, PTS) ~ Home.Neutral + Visitor.Neutral + group(Date), data = matches,
subset = PTS.1 != PTS) # to get rid of ties for now
summary(results)
rank.teams(results)
mc <- elo.markovchain(score(points.Home, points.Visitor) ~ team.Home + team.Visitor, data = tournament,
subset = points.Home != points.Visitor, k = 0.7)
summary(mc)
mc <- elo.markovchain(score(PTS.1, PTS) ~ Home.Neutral + Visitor.Neutral, data = matches,
subset = PTS.1 != PTS, k = 0.7)
summary(mc)
rank.teams(mc)
getwd()
knitr::opts_chunk$set(echo = TRUE)
# Data
read.csv('../Basketball-Reference-19-20/Games/Season-19-20.csv')
# Data
read.csv('../Basketball-Reference-19-20/Games/Season-19-20.csv', header=TRUE)
getwd()
# Data
read.csv('C:/Users/Ryan/Desktop/SDSFinalProject/Final Project/Basketball-Reference-19-20/Games/Season-19-20.csv', header=TRUE)
head(Season.19.20)
head(Season-19-20)
head(Season-19-20)
# Data
Season.19.20 <- read.csv('C:/Users/Ryan/Desktop/SDSFinalProject/Final Project/Basketball-Reference-19-20/Games/Season-19-20.csv', header=TRUE)
head(Season.19.20)
